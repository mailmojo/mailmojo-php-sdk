<?php
/**
 * NewsletterApi
 * PHP version 5
 *
 * @category Class
 * @package  MailMojo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MailMojo API
 *
 * v1 of the MailMojo API
 *
 * OpenAPI spec version: 1.1.0
 * Contact: hjelp@mailmojo.no
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MailMojo\MailMojo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MailMojo\ApiException;
use MailMojo\Configuration;
use MailMojo\HeaderSelector;
use MailMojo\ObjectSerializer;

/**
 * NewsletterApi Class Doc Comment
 *
 * @category Class
 * @package  MailMojo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NewsletterApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelNewsletter
     *
     * Cancel a newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailMojo\MailMojo\Model\NewsletterDetail
     */
    public function cancelNewsletter($newsletter_id)
    {
        list($response) = $this->cancelNewsletterWithHttpInfo($newsletter_id);
        return $response;
    }

    /**
     * Operation cancelNewsletterWithHttpInfo
     *
     * Cancel a newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailMojo\MailMojo\Model\NewsletterDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelNewsletterWithHttpInfo($newsletter_id)
    {
        $returnType = '\MailMojo\MailMojo\Model\NewsletterDetail';
        $request = $this->cancelNewsletterRequest($newsletter_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailMojo\MailMojo\Model\NewsletterDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelNewsletterAsync
     *
     * Cancel a newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelNewsletterAsync($newsletter_id)
    {
        return $this->cancelNewsletterAsyncWithHttpInfo($newsletter_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelNewsletterAsyncWithHttpInfo
     *
     * Cancel a newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelNewsletterAsyncWithHttpInfo($newsletter_id)
    {
        $returnType = '\MailMojo\MailMojo\Model\NewsletterDetail';
        $request = $this->cancelNewsletterRequest($newsletter_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelNewsletter'
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelNewsletterRequest($newsletter_id)
    {
        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling cancelNewsletter'
            );
        }

        $resourcePath = '/v1/newsletters/{newsletter_id}/cancel/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createNewsletter
     *
     * Create a newsletter draft.
     *
     * @param  \MailMojo\MailMojo\Model\NewsletterCreation $newsletter newsletter (required)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailMojo\MailMojo\Model\NewsletterDetail
     */
    public function createNewsletter($newsletter)
    {
        list($response) = $this->createNewsletterWithHttpInfo($newsletter);
        return $response;
    }

    /**
     * Operation createNewsletterWithHttpInfo
     *
     * Create a newsletter draft.
     *
     * @param  \MailMojo\MailMojo\Model\NewsletterCreation $newsletter (required)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailMojo\MailMojo\Model\NewsletterDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNewsletterWithHttpInfo($newsletter)
    {
        $returnType = '\MailMojo\MailMojo\Model\NewsletterDetail';
        $request = $this->createNewsletterRequest($newsletter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailMojo\MailMojo\Model\NewsletterDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNewsletterAsync
     *
     * Create a newsletter draft.
     *
     * @param  \MailMojo\MailMojo\Model\NewsletterCreation $newsletter (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewsletterAsync($newsletter)
    {
        return $this->createNewsletterAsyncWithHttpInfo($newsletter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNewsletterAsyncWithHttpInfo
     *
     * Create a newsletter draft.
     *
     * @param  \MailMojo\MailMojo\Model\NewsletterCreation $newsletter (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNewsletterAsyncWithHttpInfo($newsletter)
    {
        $returnType = '\MailMojo\MailMojo\Model\NewsletterDetail';
        $request = $this->createNewsletterRequest($newsletter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNewsletter'
     *
     * @param  \MailMojo\MailMojo\Model\NewsletterCreation $newsletter (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNewsletterRequest($newsletter)
    {
        // verify the required parameter 'newsletter' is set
        if ($newsletter === null || (is_array($newsletter) && count($newsletter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter when calling createNewsletter'
            );
        }

        $resourcePath = '/v1/newsletters/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($newsletter)) {
            $_tempBody = $newsletter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNewsletterById
     *
     * Retrieve a newsletter by id.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailMojo\MailMojo\Model\NewsletterDetail
     */
    public function getNewsletterById($newsletter_id)
    {
        list($response) = $this->getNewsletterByIdWithHttpInfo($newsletter_id);
        return $response;
    }

    /**
     * Operation getNewsletterByIdWithHttpInfo
     *
     * Retrieve a newsletter by id.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailMojo\MailMojo\Model\NewsletterDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNewsletterByIdWithHttpInfo($newsletter_id)
    {
        $returnType = '\MailMojo\MailMojo\Model\NewsletterDetail';
        $request = $this->getNewsletterByIdRequest($newsletter_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailMojo\MailMojo\Model\NewsletterDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNewsletterByIdAsync
     *
     * Retrieve a newsletter by id.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterByIdAsync($newsletter_id)
    {
        return $this->getNewsletterByIdAsyncWithHttpInfo($newsletter_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNewsletterByIdAsyncWithHttpInfo
     *
     * Retrieve a newsletter by id.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewsletterByIdAsyncWithHttpInfo($newsletter_id)
    {
        $returnType = '\MailMojo\MailMojo\Model\NewsletterDetail';
        $request = $this->getNewsletterByIdRequest($newsletter_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNewsletterById'
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNewsletterByIdRequest($newsletter_id)
    {
        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling getNewsletterById'
            );
        }

        $resourcePath = '/v1/newsletters/{newsletter_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNewsletters
     *
     * Retrieve all newsletters.
     *
     * @param  int $page The current page of items (1 indexed). (optional, default to 1)
     * @param  int $per_page The number of items returned per page. (optional, default to 25)
     * @param  string $type The type of newsletters to retrieve. Supported options are &#x60;draft&#x60;, &#x60;scheduled&#x60; and &#x60;sent&#x60;. (optional)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailMojo\MailMojo\Model\InlineResponse200
     */
    public function getNewsletters($page = '1', $per_page = '25', $type = null)
    {
        list($response) = $this->getNewslettersWithHttpInfo($page, $per_page, $type);
        return $response;
    }

    /**
     * Operation getNewslettersWithHttpInfo
     *
     * Retrieve all newsletters.
     *
     * @param  int $page The current page of items (1 indexed). (optional, default to 1)
     * @param  int $per_page The number of items returned per page. (optional, default to 25)
     * @param  string $type The type of newsletters to retrieve. Supported options are &#x60;draft&#x60;, &#x60;scheduled&#x60; and &#x60;sent&#x60;. (optional)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailMojo\MailMojo\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNewslettersWithHttpInfo($page = '1', $per_page = '25', $type = null)
    {
        $returnType = '\MailMojo\MailMojo\Model\InlineResponse200';
        $request = $this->getNewslettersRequest($page, $per_page, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailMojo\MailMojo\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNewslettersAsync
     *
     * Retrieve all newsletters.
     *
     * @param  int $page The current page of items (1 indexed). (optional, default to 1)
     * @param  int $per_page The number of items returned per page. (optional, default to 25)
     * @param  string $type The type of newsletters to retrieve. Supported options are &#x60;draft&#x60;, &#x60;scheduled&#x60; and &#x60;sent&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewslettersAsync($page = '1', $per_page = '25', $type = null)
    {
        return $this->getNewslettersAsyncWithHttpInfo($page, $per_page, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNewslettersAsyncWithHttpInfo
     *
     * Retrieve all newsletters.
     *
     * @param  int $page The current page of items (1 indexed). (optional, default to 1)
     * @param  int $per_page The number of items returned per page. (optional, default to 25)
     * @param  string $type The type of newsletters to retrieve. Supported options are &#x60;draft&#x60;, &#x60;scheduled&#x60; and &#x60;sent&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewslettersAsyncWithHttpInfo($page = '1', $per_page = '25', $type = null)
    {
        $returnType = '\MailMojo\MailMojo\Model\InlineResponse200';
        $request = $this->getNewslettersRequest($page, $per_page, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNewsletters'
     *
     * @param  int $page The current page of items (1 indexed). (optional, default to 1)
     * @param  int $per_page The number of items returned per page. (optional, default to 25)
     * @param  string $type The type of newsletters to retrieve. Supported options are &#x60;draft&#x60;, &#x60;scheduled&#x60; and &#x60;sent&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNewslettersRequest($page = '1', $per_page = '25', $type = null)
    {

        $resourcePath = '/v1/newsletters/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendNewsletter
     *
     * Send a newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterSend $config config (optional)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailMojo\MailMojo\Model\NewsletterDetail
     */
    public function sendNewsletter($newsletter_id, $config = null)
    {
        list($response) = $this->sendNewsletterWithHttpInfo($newsletter_id, $config);
        return $response;
    }

    /**
     * Operation sendNewsletterWithHttpInfo
     *
     * Send a newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterSend $config (optional)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailMojo\MailMojo\Model\NewsletterDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendNewsletterWithHttpInfo($newsletter_id, $config = null)
    {
        $returnType = '\MailMojo\MailMojo\Model\NewsletterDetail';
        $request = $this->sendNewsletterRequest($newsletter_id, $config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailMojo\MailMojo\Model\NewsletterDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendNewsletterAsync
     *
     * Send a newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterSend $config (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendNewsletterAsync($newsletter_id, $config = null)
    {
        return $this->sendNewsletterAsyncWithHttpInfo($newsletter_id, $config)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendNewsletterAsyncWithHttpInfo
     *
     * Send a newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterSend $config (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendNewsletterAsyncWithHttpInfo($newsletter_id, $config = null)
    {
        $returnType = '\MailMojo\MailMojo\Model\NewsletterDetail';
        $request = $this->sendNewsletterRequest($newsletter_id, $config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendNewsletter'
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterSend $config (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendNewsletterRequest($newsletter_id, $config = null)
    {
        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling sendNewsletter'
            );
        }

        $resourcePath = '/v1/newsletters/{newsletter_id}/send/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($config)) {
            $_tempBody = $config;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testNewsletter
     *
     * Send a test newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterSendTest $config config (required)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function testNewsletter($newsletter_id, $config)
    {
        $this->testNewsletterWithHttpInfo($newsletter_id, $config);
    }

    /**
     * Operation testNewsletterWithHttpInfo
     *
     * Send a test newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterSendTest $config (required)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function testNewsletterWithHttpInfo($newsletter_id, $config)
    {
        $returnType = '';
        $request = $this->testNewsletterRequest($newsletter_id, $config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testNewsletterAsync
     *
     * Send a test newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterSendTest $config (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testNewsletterAsync($newsletter_id, $config)
    {
        return $this->testNewsletterAsyncWithHttpInfo($newsletter_id, $config)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testNewsletterAsyncWithHttpInfo
     *
     * Send a test newsletter.
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterSendTest $config (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testNewsletterAsyncWithHttpInfo($newsletter_id, $config)
    {
        $returnType = '';
        $request = $this->testNewsletterRequest($newsletter_id, $config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testNewsletter'
     *
     * @param  int $newsletter_id ID of the newsletter to retrieve. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterSendTest $config (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function testNewsletterRequest($newsletter_id, $config)
    {
        // verify the required parameter 'newsletter_id' is set
        if ($newsletter_id === null || (is_array($newsletter_id) && count($newsletter_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $newsletter_id when calling testNewsletter'
            );
        }
        // verify the required parameter 'config' is set
        if ($config === null || (is_array($config) && count($config) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config when calling testNewsletter'
            );
        }

        $resourcePath = '/v1/newsletters/{newsletter_id}/send_test/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($newsletter_id !== null) {
            $resourcePath = str_replace(
                '{' . 'newsletter_id' . '}',
                ObjectSerializer::toPathValue($newsletter_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($config)) {
            $_tempBody = $config;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNewsletter
     *
     * Update a newsletter draft partially.
     *
     * @param  int $id ID of the newsletter to update. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterUpdate $newsletter newsletter (optional)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailMojo\MailMojo\Model\NewsletterDetail
     */
    public function updateNewsletter($id, $newsletter = null)
    {
        list($response) = $this->updateNewsletterWithHttpInfo($id, $newsletter);
        return $response;
    }

    /**
     * Operation updateNewsletterWithHttpInfo
     *
     * Update a newsletter draft partially.
     *
     * @param  int $id ID of the newsletter to update. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterUpdate $newsletter (optional)
     *
     * @throws \MailMojo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailMojo\MailMojo\Model\NewsletterDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNewsletterWithHttpInfo($id, $newsletter = null)
    {
        $returnType = '\MailMojo\MailMojo\Model\NewsletterDetail';
        $request = $this->updateNewsletterRequest($id, $newsletter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailMojo\MailMojo\Model\NewsletterDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNewsletterAsync
     *
     * Update a newsletter draft partially.
     *
     * @param  int $id ID of the newsletter to update. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterUpdate $newsletter (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNewsletterAsync($id, $newsletter = null)
    {
        return $this->updateNewsletterAsyncWithHttpInfo($id, $newsletter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNewsletterAsyncWithHttpInfo
     *
     * Update a newsletter draft partially.
     *
     * @param  int $id ID of the newsletter to update. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterUpdate $newsletter (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNewsletterAsyncWithHttpInfo($id, $newsletter = null)
    {
        $returnType = '\MailMojo\MailMojo\Model\NewsletterDetail';
        $request = $this->updateNewsletterRequest($id, $newsletter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNewsletter'
     *
     * @param  int $id ID of the newsletter to update. (required)
     * @param  \MailMojo\MailMojo\Model\NewsletterUpdate $newsletter (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNewsletterRequest($id, $newsletter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateNewsletter'
            );
        }

        $resourcePath = '/v1/newsletters/{newsletter_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($newsletter)) {
            $_tempBody = $newsletter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
