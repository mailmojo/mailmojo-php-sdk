<?php
/**
 * Template
 *
 * PHP version 5
 *
 * @category Class
 * @package  MailMojo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MailMojo API
 *
 * v1 of the MailMojo API
 *
 * OpenAPI spec version: 1.1.0
 * Contact: hjelp@mailmojo.no
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MailMojo\MailMojo\Model;

use \ArrayAccess;
use \MailMojo\ObjectSerializer;

/**
 * Template Class Doc Comment
 *
 * @category Class
 * @package  MailMojo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Template implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Template';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'campaign_expires_at' => '\DateTime',
        'campaign_price' => 'float',
        'categories' => '\MailMojo\MailMojo\Model\Category[]',
        'current_price' => 'float',
        'data' => 'object',
        'description' => 'string',
        'id' => 'int',
        'is_buyable' => 'bool',
        'is_editable' => 'bool',
        'is_on_sale' => 'bool',
        'name' => 'string',
        'preview_url' => 'object',
        'price' => 'float',
        'product_category' => 'string',
        'product_description' => 'string',
        'product_id' => 'object[]',
        'product_type' => 'string',
        'screenshot_url' => 'object',
        'settings' => 'object',
        'total_price' => 'float',
        'vat_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'campaign_expires_at' => 'date-time',
        'campaign_price' => null,
        'categories' => null,
        'current_price' => null,
        'data' => null,
        'description' => null,
        'id' => 'int32',
        'is_buyable' => null,
        'is_editable' => null,
        'is_on_sale' => null,
        'name' => null,
        'preview_url' => null,
        'price' => null,
        'product_category' => null,
        'product_description' => null,
        'product_id' => null,
        'product_type' => null,
        'screenshot_url' => null,
        'settings' => null,
        'total_price' => null,
        'vat_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_expires_at' => 'campaign_expires_at',
        'campaign_price' => 'campaign_price',
        'categories' => 'categories',
        'current_price' => 'current_price',
        'data' => 'data',
        'description' => 'description',
        'id' => 'id',
        'is_buyable' => 'is_buyable',
        'is_editable' => 'is_editable',
        'is_on_sale' => 'is_on_sale',
        'name' => 'name',
        'preview_url' => 'preview_url',
        'price' => 'price',
        'product_category' => 'product_category',
        'product_description' => 'product_description',
        'product_id' => 'product_id',
        'product_type' => 'product_type',
        'screenshot_url' => 'screenshot_url',
        'settings' => 'settings',
        'total_price' => 'total_price',
        'vat_amount' => 'vat_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_expires_at' => 'setCampaignExpiresAt',
        'campaign_price' => 'setCampaignPrice',
        'categories' => 'setCategories',
        'current_price' => 'setCurrentPrice',
        'data' => 'setData',
        'description' => 'setDescription',
        'id' => 'setId',
        'is_buyable' => 'setIsBuyable',
        'is_editable' => 'setIsEditable',
        'is_on_sale' => 'setIsOnSale',
        'name' => 'setName',
        'preview_url' => 'setPreviewUrl',
        'price' => 'setPrice',
        'product_category' => 'setProductCategory',
        'product_description' => 'setProductDescription',
        'product_id' => 'setProductId',
        'product_type' => 'setProductType',
        'screenshot_url' => 'setScreenshotUrl',
        'settings' => 'setSettings',
        'total_price' => 'setTotalPrice',
        'vat_amount' => 'setVatAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_expires_at' => 'getCampaignExpiresAt',
        'campaign_price' => 'getCampaignPrice',
        'categories' => 'getCategories',
        'current_price' => 'getCurrentPrice',
        'data' => 'getData',
        'description' => 'getDescription',
        'id' => 'getId',
        'is_buyable' => 'getIsBuyable',
        'is_editable' => 'getIsEditable',
        'is_on_sale' => 'getIsOnSale',
        'name' => 'getName',
        'preview_url' => 'getPreviewUrl',
        'price' => 'getPrice',
        'product_category' => 'getProductCategory',
        'product_description' => 'getProductDescription',
        'product_id' => 'getProductId',
        'product_type' => 'getProductType',
        'screenshot_url' => 'getScreenshotUrl',
        'settings' => 'getSettings',
        'total_price' => 'getTotalPrice',
        'vat_amount' => 'getVatAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['campaign_expires_at'] = isset($data['campaign_expires_at']) ? $data['campaign_expires_at'] : null;
        $this->container['campaign_price'] = isset($data['campaign_price']) ? $data['campaign_price'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['current_price'] = isset($data['current_price']) ? $data['current_price'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_buyable'] = isset($data['is_buyable']) ? $data['is_buyable'] : null;
        $this->container['is_editable'] = isset($data['is_editable']) ? $data['is_editable'] : null;
        $this->container['is_on_sale'] = isset($data['is_on_sale']) ? $data['is_on_sale'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['preview_url'] = isset($data['preview_url']) ? $data['preview_url'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['product_category'] = isset($data['product_category']) ? $data['product_category'] : null;
        $this->container['product_description'] = isset($data['product_description']) ? $data['product_description'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['screenshot_url'] = isset($data['screenshot_url']) ? $data['screenshot_url'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['vat_amount'] = isset($data['vat_amount']) ? $data['vat_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign_expires_at
     *
     * @return \DateTime
     */
    public function getCampaignExpiresAt()
    {
        return $this->container['campaign_expires_at'];
    }

    /**
     * Sets campaign_expires_at
     *
     * @param \DateTime $campaign_expires_at campaign_expires_at
     *
     * @return $this
     */
    public function setCampaignExpiresAt($campaign_expires_at)
    {
        $this->container['campaign_expires_at'] = $campaign_expires_at;

        return $this;
    }

    /**
     * Gets campaign_price
     *
     * @return float
     */
    public function getCampaignPrice()
    {
        return $this->container['campaign_price'];
    }

    /**
     * Sets campaign_price
     *
     * @param float $campaign_price campaign_price
     *
     * @return $this
     */
    public function setCampaignPrice($campaign_price)
    {
        $this->container['campaign_price'] = $campaign_price;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \MailMojo\MailMojo\Model\Category[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \MailMojo\MailMojo\Model\Category[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets current_price
     *
     * @return float
     */
    public function getCurrentPrice()
    {
        return $this->container['current_price'];
    }

    /**
     * Sets current_price
     *
     * @param float $current_price current_price
     *
     * @return $this
     */
    public function setCurrentPrice($current_price)
    {
        $this->container['current_price'] = $current_price;

        return $this;
    }

    /**
     * Gets data
     *
     * @return object
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param object $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_buyable
     *
     * @return bool
     */
    public function getIsBuyable()
    {
        return $this->container['is_buyable'];
    }

    /**
     * Sets is_buyable
     *
     * @param bool $is_buyable is_buyable
     *
     * @return $this
     */
    public function setIsBuyable($is_buyable)
    {
        $this->container['is_buyable'] = $is_buyable;

        return $this;
    }

    /**
     * Gets is_editable
     *
     * @return bool
     */
    public function getIsEditable()
    {
        return $this->container['is_editable'];
    }

    /**
     * Sets is_editable
     *
     * @param bool $is_editable is_editable
     *
     * @return $this
     */
    public function setIsEditable($is_editable)
    {
        $this->container['is_editable'] = $is_editable;

        return $this;
    }

    /**
     * Gets is_on_sale
     *
     * @return bool
     */
    public function getIsOnSale()
    {
        return $this->container['is_on_sale'];
    }

    /**
     * Sets is_on_sale
     *
     * @param bool $is_on_sale is_on_sale
     *
     * @return $this
     */
    public function setIsOnSale($is_on_sale)
    {
        $this->container['is_on_sale'] = $is_on_sale;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets preview_url
     *
     * @return object
     */
    public function getPreviewUrl()
    {
        return $this->container['preview_url'];
    }

    /**
     * Sets preview_url
     *
     * @param object $preview_url preview_url
     *
     * @return $this
     */
    public function setPreviewUrl($preview_url)
    {
        $this->container['preview_url'] = $preview_url;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return string
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param string $product_category product_category
     *
     * @return $this
     */
    public function setProductCategory($product_category)
    {
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets product_description
     *
     * @return string
     */
    public function getProductDescription()
    {
        return $this->container['product_description'];
    }

    /**
     * Sets product_description
     *
     * @param string $product_description product_description
     *
     * @return $this
     */
    public function setProductDescription($product_description)
    {
        $this->container['product_description'] = $product_description;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return object[]
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param object[] $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string $product_type product_type
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets screenshot_url
     *
     * @return object
     */
    public function getScreenshotUrl()
    {
        return $this->container['screenshot_url'];
    }

    /**
     * Sets screenshot_url
     *
     * @param object $screenshot_url screenshot_url
     *
     * @return $this
     */
    public function setScreenshotUrl($screenshot_url)
    {
        $this->container['screenshot_url'] = $screenshot_url;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return object
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param object $settings settings
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price total_price
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return float
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param float $vat_amount vat_amount
     *
     * @return $this
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


