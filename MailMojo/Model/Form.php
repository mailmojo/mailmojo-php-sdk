<?php
/**
 * Form
 *
 * PHP version 5
 *
 * @category Class
 * @package  MailMojo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MailMojo API
 *
 * v1 of the MailMojo API
 *
 * OpenAPI spec version: 1.1.0
 * Contact: hjelp@mailmojo.no
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace MailMojo\MailMojo\Model;

use \ArrayAccess;
use \MailMojo\ObjectSerializer;

/**
 * Form Class Doc Comment
 *
 * @category Class
 * @package  MailMojo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Form implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Form';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'config' => 'object',
        'confirmation_html' => 'string',
        'created_at' => '\DateTime',
        'editor_confirmation_html' => 'string',
        'editor_html' => 'string',
        'expired_at' => '\DateTime',
        'final_confirmation_html' => 'string',
        'final_html' => 'string',
        'html' => 'string',
        'id' => 'int',
        'lid' => 'int',
        'name' => 'string',
        'published_at' => '\DateTime',
        'styles' => 'string',
        'template_id' => 'int',
        'type' => 'string',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'config' => null,
        'confirmation_html' => null,
        'created_at' => 'date-time',
        'editor_confirmation_html' => null,
        'editor_html' => null,
        'expired_at' => 'date-time',
        'final_confirmation_html' => null,
        'final_html' => null,
        'html' => null,
        'id' => 'int32',
        'lid' => 'int32',
        'name' => null,
        'published_at' => 'date-time',
        'styles' => null,
        'template_id' => 'int32',
        'type' => null,
        'updated_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'config' => 'config',
        'confirmation_html' => 'confirmation_html',
        'created_at' => 'created_at',
        'editor_confirmation_html' => 'editor_confirmation_html',
        'editor_html' => 'editor_html',
        'expired_at' => 'expired_at',
        'final_confirmation_html' => 'final_confirmation_html',
        'final_html' => 'final_html',
        'html' => 'html',
        'id' => 'id',
        'lid' => 'lid',
        'name' => 'name',
        'published_at' => 'published_at',
        'styles' => 'styles',
        'template_id' => 'template_id',
        'type' => 'type',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'config' => 'setConfig',
        'confirmation_html' => 'setConfirmationHtml',
        'created_at' => 'setCreatedAt',
        'editor_confirmation_html' => 'setEditorConfirmationHtml',
        'editor_html' => 'setEditorHtml',
        'expired_at' => 'setExpiredAt',
        'final_confirmation_html' => 'setFinalConfirmationHtml',
        'final_html' => 'setFinalHtml',
        'html' => 'setHtml',
        'id' => 'setId',
        'lid' => 'setLid',
        'name' => 'setName',
        'published_at' => 'setPublishedAt',
        'styles' => 'setStyles',
        'template_id' => 'setTemplateId',
        'type' => 'setType',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'config' => 'getConfig',
        'confirmation_html' => 'getConfirmationHtml',
        'created_at' => 'getCreatedAt',
        'editor_confirmation_html' => 'getEditorConfirmationHtml',
        'editor_html' => 'getEditorHtml',
        'expired_at' => 'getExpiredAt',
        'final_confirmation_html' => 'getFinalConfirmationHtml',
        'final_html' => 'getFinalHtml',
        'html' => 'getHtml',
        'id' => 'getId',
        'lid' => 'getLid',
        'name' => 'getName',
        'published_at' => 'getPublishedAt',
        'styles' => 'getStyles',
        'template_id' => 'getTemplateId',
        'type' => 'getType',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_EMBEDDED = 'embedded';
    const TYPE_SUBSCRIBE = 'subscribe';
    const TYPE_SUBSCRIBE_POPUP = 'subscribe_popup';
    const TYPE_UNSUBSCRIBE = 'unsubscribe';
    const TYPE_PROFILE = 'profile';
    const TYPE_FORWARD = 'forward';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_EMBEDDED,
            self::TYPE_SUBSCRIBE,
            self::TYPE_SUBSCRIBE_POPUP,
            self::TYPE_UNSUBSCRIBE,
            self::TYPE_PROFILE,
            self::TYPE_FORWARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['confirmation_html'] = isset($data['confirmation_html']) ? $data['confirmation_html'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['editor_confirmation_html'] = isset($data['editor_confirmation_html']) ? $data['editor_confirmation_html'] : null;
        $this->container['editor_html'] = isset($data['editor_html']) ? $data['editor_html'] : null;
        $this->container['expired_at'] = isset($data['expired_at']) ? $data['expired_at'] : null;
        $this->container['final_confirmation_html'] = isset($data['final_confirmation_html']) ? $data['final_confirmation_html'] : null;
        $this->container['final_html'] = isset($data['final_html']) ? $data['final_html'] : null;
        $this->container['html'] = isset($data['html']) ? $data['html'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['lid'] = isset($data['lid']) ? $data['lid'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['published_at'] = isset($data['published_at']) ? $data['published_at'] : null;
        $this->container['styles'] = isset($data['styles']) ? $data['styles'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['config'] === null) {
            $invalidProperties[] = "'config' can't be null";
        }
        if ($this->container['confirmation_html'] === null) {
            $invalidProperties[] = "'confirmation_html' can't be null";
        }
        if ($this->container['html'] === null) {
            $invalidProperties[] = "'html' can't be null";
        }
        if ($this->container['lid'] === null) {
            $invalidProperties[] = "'lid' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets config
     *
     * @return object
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param object $config config
     *
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets confirmation_html
     *
     * @return string
     */
    public function getConfirmationHtml()
    {
        return $this->container['confirmation_html'];
    }

    /**
     * Sets confirmation_html
     *
     * @param string $confirmation_html confirmation_html
     *
     * @return $this
     */
    public function setConfirmationHtml($confirmation_html)
    {
        $this->container['confirmation_html'] = $confirmation_html;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets editor_confirmation_html
     *
     * @return string
     */
    public function getEditorConfirmationHtml()
    {
        return $this->container['editor_confirmation_html'];
    }

    /**
     * Sets editor_confirmation_html
     *
     * @param string $editor_confirmation_html editor_confirmation_html
     *
     * @return $this
     */
    public function setEditorConfirmationHtml($editor_confirmation_html)
    {
        $this->container['editor_confirmation_html'] = $editor_confirmation_html;

        return $this;
    }

    /**
     * Gets editor_html
     *
     * @return string
     */
    public function getEditorHtml()
    {
        return $this->container['editor_html'];
    }

    /**
     * Sets editor_html
     *
     * @param string $editor_html editor_html
     *
     * @return $this
     */
    public function setEditorHtml($editor_html)
    {
        $this->container['editor_html'] = $editor_html;

        return $this;
    }

    /**
     * Gets expired_at
     *
     * @return \DateTime
     */
    public function getExpiredAt()
    {
        return $this->container['expired_at'];
    }

    /**
     * Sets expired_at
     *
     * @param \DateTime $expired_at expired_at
     *
     * @return $this
     */
    public function setExpiredAt($expired_at)
    {
        $this->container['expired_at'] = $expired_at;

        return $this;
    }

    /**
     * Gets final_confirmation_html
     *
     * @return string
     */
    public function getFinalConfirmationHtml()
    {
        return $this->container['final_confirmation_html'];
    }

    /**
     * Sets final_confirmation_html
     *
     * @param string $final_confirmation_html final_confirmation_html
     *
     * @return $this
     */
    public function setFinalConfirmationHtml($final_confirmation_html)
    {
        $this->container['final_confirmation_html'] = $final_confirmation_html;

        return $this;
    }

    /**
     * Gets final_html
     *
     * @return string
     */
    public function getFinalHtml()
    {
        return $this->container['final_html'];
    }

    /**
     * Sets final_html
     *
     * @param string $final_html final_html
     *
     * @return $this
     */
    public function setFinalHtml($final_html)
    {
        $this->container['final_html'] = $final_html;

        return $this;
    }

    /**
     * Gets html
     *
     * @return string
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param string $html html
     *
     * @return $this
     */
    public function setHtml($html)
    {
        $this->container['html'] = $html;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets lid
     *
     * @return int
     */
    public function getLid()
    {
        return $this->container['lid'];
    }

    /**
     * Sets lid
     *
     * @param int $lid lid
     *
     * @return $this
     */
    public function setLid($lid)
    {
        $this->container['lid'] = $lid;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets published_at
     *
     * @return \DateTime
     */
    public function getPublishedAt()
    {
        return $this->container['published_at'];
    }

    /**
     * Sets published_at
     *
     * @param \DateTime $published_at published_at
     *
     * @return $this
     */
    public function setPublishedAt($published_at)
    {
        $this->container['published_at'] = $published_at;

        return $this;
    }

    /**
     * Gets styles
     *
     * @return string
     */
    public function getStyles()
    {
        return $this->container['styles'];
    }

    /**
     * Sets styles
     *
     * @param string $styles styles
     *
     * @return $this
     */
    public function setStyles($styles)
    {
        $this->container['styles'] = $styles;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


